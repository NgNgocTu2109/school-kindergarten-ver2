import React, { useState } from 'react';
import axios from 'axios';
import Sidebar from './Sidebar';
import {
  HistoryContainer,
  Content,
  HistoryContent,
  HistoryHeader,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
} from '../../styles/StudentHistoryStyles';

const AdminStudentHistory = () => {
  const [searchName, setSearchName] = useState("");
  const [student, setStudent] = useState(null);
  const [attendance, setAttendance] = useState([]);
  const [services, setServices] = useState([]);
  const [bills, setBills] = useState([]);
  const [events, setEvents] = useState([]);

  const handleSearch = async () => {
  try {
    const res = await axios.get(`http://localhost:4000/api/v1/children/search?name=${searchName}`);
    const found = res.data.children?.[0];
    if (!found) return alert("Kh√¥ng t√¨m th·∫•y h·ªçc sinh");

    const childId = found._id;
    const baseURL = "http://localhost:4000/api/v1";

    const [attRes, svcRes, billRes, evtRes] = await Promise.all([
      axios.get(`${baseURL}/attendance/child-history`, { params: { childId } }),
      axios.get(`${baseURL}/services/usage-history`, { params: { childId } }),
      axios.get(`${baseURL}/bill/child/${childId}`),
      axios.get(`${baseURL}/event/history`, { params: { childId } }),
    ]);

    // ‚úÖ X·ª≠ l√Ω l·∫•y t√™n l·ªõp ƒë√∫ng c√°ch
    let className = "Kh√¥ng x√°c ƒë·ªãnh";
    const classId = typeof found.classId === 'object' ? found.classId._id : found.classId;

    if (classId && typeof classId === 'string') {
      try {
        const classRes = await axios.get(`${baseURL}/class/${classId}`);
        className = classRes.data.class?.grade || "Kh√¥ng x√°c ƒë·ªãnh";
      } catch (err) {
        console.warn("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin l·ªõp:", err?.response?.data || err.message);
      }
    }

    // ‚úÖ C·∫≠p nh·∫≠t state
    setStudent({ ...found, className });
    setAttendance(attRes.data.records || []);
    setServices(svcRes.data.history || []);
    setBills(billRes.data.bills || []);
    setEvents(evtRes.data.events || []);
  } catch (err) {
    console.error("‚ùå L·ªói chi ti·∫øt:", err.response?.data || err.message || err);
    alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠. Vui l√≤ng ki·ªÉm tra API backend.");
  }
};


  return (
    <HistoryContainer>
      <Sidebar />
      <Content>
        <HistoryContent>
          <HistoryHeader>üìö Qu·∫£n l√Ω l·ªãch s·ª≠ ho·∫°t ƒë·ªông h·ªçc sinh</HistoryHeader>

          <div style={{ margin: '16px 0' }}>
            <input
              type="text"
              placeholder="Nh·∫≠p t√™n h·ªçc sinh"
              value={searchName}
              onChange={(e) => setSearchName(e.target.value)}
              style={{ padding: '8px', width: '300px' }}
            />
            <button onClick={handleSearch} style={{ marginLeft: '12px', padding: '8px 16px' }}>
              T√¨m ki·∫øm
            </button>
          </div>

          {student && (
            <div>
              <h3>üë§ Th√¥ng tin h·ªçc sinh:</h3>
              <p><strong>H·ªç t√™n:</strong> {student.fullName}</p>
              <p><strong>L·ªõp:</strong> {student.className || '‚Äî'}</p>
              <p><strong>Ng√†y sinh:</strong> {student.birthday ? new Date(student.birthday).toLocaleDateString() : '‚Äî'}</p>

              <h4>üìÖ L·ªãch s·ª≠ ƒëi·ªÉm danh:</h4>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Ng√†y</TableCell>
                    <TableCell>Tr·∫°ng th√°i</TableCell>
                    <TableCell>ƒÇn</TableCell>
                    <TableCell>Ng·ªß</TableCell>
                    <TableCell>Ghi ch√∫</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {attendance.map((a, idx) => (
                    <TableRow key={idx}>
                      <TableCell>{new Date(a.date).toLocaleDateString()}</TableCell>
                      <TableCell>{a.status}</TableCell>
                      <TableCell>{a.eat}</TableCell>
                      <TableCell>{a.sleep}</TableCell>
                      <TableCell>{a.note}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>

              <h4>üß∫ D·ªãch v·ª• ƒë√£ d√πng:</h4>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>D·ªãch v·ª•</TableCell>
                    <TableCell>Ng√†y</TableCell>
                    <TableCell>Ghi ch√∫</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {services.map((s, idx) => (
                    <TableRow key={idx}>
                      <TableCell>{s.serviceName}</TableCell>
                      <TableCell>{new Date(s.date).toLocaleDateString()}</TableCell>
                      <TableCell>{s.note || '‚Äî'}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>

              <h4>üí∞ H√≥a ƒë∆°n h·ªçc ph√≠:</h4>
                <Table>
                <TableHead>
                        <TableRow>
                    <TableCell>Th√°ng</TableCell>
                    <TableCell>T·ªïng ti·ªÅn</TableCell>
                    <TableCell>Tr·∫°ng th√°i</TableCell>
                     </TableRow>
                </TableHead>
                <TableBody>
                    {bills.map((b, idx) => (
                <TableRow key={idx}>
                <TableCell>{b.month?.replace("-", "/")}</TableCell>
                <TableCell>{(b.total || 0).toLocaleString('vi-VN')}ƒë</TableCell>
                <TableCell>{b.isPaid ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n'}</TableCell>
                 </TableRow>
                ))}
                 </TableBody>
                </Table>

              <h4>üéà S·ª± ki·ªán ƒë√£ tham gia:</h4>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>S·ª± ki·ªán</TableCell>
                    <TableCell>Ng√†y</TableCell>
                    <TableCell>ƒê·ªãa ƒëi·ªÉm</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {events.map((e, idx) => (
                    <TableRow key={idx}>
                      <TableCell>{e.title}</TableCell>
                      <TableCell>{new Date(e.date).toLocaleDateString()}</TableCell>
                      <TableCell>{e.location || '‚Äî'}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </HistoryContent>
      </Content>
    </HistoryContainer>
  );
};

export default AdminStudentHistory;
